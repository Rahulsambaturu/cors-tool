2025-04-02 11:28:12,528 - ERROR - Error scanning import csvimport requestsimport concurrent.futuresimport loggingfrom urllib.parse import urlparsedef setup_logging():    """Configures logging for debugging and error tracking."""    logging.basicConfig(        filename='cors_scan.log',        level=logging.INFO,        format='%(asctime)s - %(levelname)s - %(message)s'    )def check_cors(url):    """Performs an advanced CORS security analysis on the given URL."""    try:        headers = {            "Origin": "https://evil.com",            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"        }        response = requests.options(url, headers=headers, timeout=5)        cors_headers = response.headers        cors_issues = []                # Checking for wildcard origin        if 'Access-Control-Allow-Origin' in cors_headers:            origin = cors_headers['Access-Control-Allow-Origin']            if origin == "*":                cors_issues.append("Wildcard '*' allowed in Access-Control-Allow-Origin (High Risk)")            else:                cors_issues.append(f"Allowed Origin: {origin}")                # Checking for exposed sensitive headers        if 'Access-Control-Expose-Headers' in cors_headers:            cors_issues.append(f"Exposed Headers: {cors_headers['Access-Control-Expose-Headers']}")                # Checking for overly permissive HTTP methods        if 'Access-Control-Allow-Methods' in cors_headers:            allowed_methods = cors_headers['Access-Control-Allow-Methods']            if 'DELETE' in allowed_methods or 'PUT' in allowed_methods:                cors_issues.append(f"Dangerous Allowed Methods: {allowed_methods}")            else:                cors_issues.append(f"Permissive Methods: {allowed_methods}")                # Checking for overly permissive headers        if 'Access-Control-Allow-Headers' in cors_headers:            cors_issues.append(f"Allowed Headers: {cors_headers['Access-Control-Allow-Headers']}")                # Checking for Allow-Credentials with wildcard origin (Critical Issue)        if ('Access-Control-Allow-Credentials' in cors_headers and cors_headers['Access-Control-Allow-Credentials'] == 'true' and            'Access-Control-Allow-Origin' in cors_headers and cors_headers['Access-Control-Allow-Origin'] == "*"):            cors_issues.append("Allow-Credentials is true with wildcard origin (Critical Security Issue)")                # Checking for Access-Control-Max-Age        if 'Access-Control-Max-Age' in cors_headers:            cors_issues.append(f"Max Age: {cors_headers['Access-Control-Max-Age']} seconds")                logging.info(f"Scanned {url}: {cors_issues}")        return cors_issues if cors_issues else ["No major CORS issues found"]    except requests.RequestException as e:        logging.error(f"Error scanning {url}: {str(e)}")        return [f"Error: {str(e)}"]def write_results_to_csv(results, filename="cors_scan_results.csv"):    """Writes CORS scan results to a CSV file."""    with open(filename, mode='w', newline='', encoding='utf-8') as file:        writer = csv.writer(file)        writer.writerow(["URL", "CORS Issues"])        for url, issues in results.items():            writer.writerow([url, " | ".join(issues)])def scan_url(url):    """Scans a single URL and returns results."""    print(f"Scanning {url}...")    return url, check_cors(url)def main():    setup_logging()    urls = []    print("Enter URLs to scan (type 'done' to finish):")    while True:        url = input("URL: ")        if url.lower() == 'done':            break        urls.append(url)        if not urls:        print("No URLs provided. Exiting...")        return        results = {}        # Using ThreadPoolExecutor for efficient multi-threaded scanning    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:        future_to_url = {executor.submit(scan_url, url): url for url in urls}        for future in concurrent.futu: No connection adapters were found for 'import csvimport requestsimport concurrent.futuresimport loggingfrom urllib.parse import urlparsedef setup_logging():    """Configures logging for debugging and error tracking."""    logging.basicConfig(        filename=\'cors_scan.log\',        level=logging.INFO,        format=\'%(asctime)s - %(levelname)s - %(message)s\'    )def check_cors(url):    """Performs an advanced CORS security analysis on the given URL."""    try:        headers = {            "Origin": "https://evil.com",            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"        }        response = requests.options(url, headers=headers, timeout=5)        cors_headers = response.headers        cors_issues = []                # Checking for wildcard origin        if \'Access-Control-Allow-Origin\' in cors_headers:            origin = cors_headers[\'Access-Control-Allow-Origin\']            if origin == "*":                cors_issues.append("Wildcard \'*\' allowed in Access-Control-Allow-Origin (High Risk)")            else:                cors_issues.append(f"Allowed Origin: {origin}")                # Checking for exposed sensitive headers        if \'Access-Control-Expose-Headers\' in cors_headers:            cors_issues.append(f"Exposed Headers: {cors_headers[\'Access-Control-Expose-Headers\']}")                # Checking for overly permissive HTTP methods        if \'Access-Control-Allow-Methods\' in cors_headers:            allowed_methods = cors_headers[\'Access-Control-Allow-Methods\']            if \'DELETE\' in allowed_methods or \'PUT\' in allowed_methods:                cors_issues.append(f"Dangerous Allowed Methods: {allowed_methods}")            else:                cors_issues.append(f"Permissive Methods: {allowed_methods}")                # Checking for overly permissive headers        if \'Access-Control-Allow-Headers\' in cors_headers:            cors_issues.append(f"Allowed Headers: {cors_headers[\'Access-Control-Allow-Headers\']}")                # Checking for Allow-Credentials with wildcard origin (Critical Issue)        if (\'Access-Control-Allow-Credentials\' in cors_headers and cors_headers[\'Access-Control-Allow-Credentials\'] == \'true\' and            \'Access-Control-Allow-Origin\' in cors_headers and cors_headers[\'Access-Control-Allow-Origin\'] == "*"):            cors_issues.append("Allow-Credentials is true with wildcard origin (Critical Security Issue)")                # Checking for Access-Control-Max-Age        if \'Access-Control-Max-Age\' in cors_headers:            cors_issues.append(f"Max Age: {cors_headers[\'Access-Control-Max-Age\']} seconds")                logging.info(f"Scanned {url}: {cors_issues}")        return cors_issues if cors_issues else ["No major CORS issues found"]    except requests.RequestException as e:        logging.error(f"Error scanning {url}: {str(e)}")        return [f"Error: {str(e)}"]def write_results_to_csv(results, filename="cors_scan_results.csv"):    """Writes CORS scan results to a CSV file."""    with open(filename, mode=\'w\', newline=\'\', encoding=\'utf-8\') as file:        writer = csv.writer(file)        writer.writerow(["URL", "CORS Issues"])        for url, issues in results.items():            writer.writerow([url, " | ".join(issues)])def scan_url(url):    """Scans a single URL and returns results."""    print(f"Scanning {url}...")    return url, check_cors(url)def main():    setup_logging()    urls = []    print("Enter URLs to scan (type \'done\' to finish):")    while True:        url = input("URL: ")        if url.lower() == \'done\':            break        urls.append(url)        if not urls:        print("No URLs provided. Exiting...")        return        results = {}        # Using ThreadPoolExecutor for efficient multi-threaded scanning    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:        future_to_url = {executor.submit(scan_url, url): url for url in urls}        for future in concurrent.futu'
2025-04-02 11:28:12,528 - ERROR - Error scanning clear: Invalid URL 'clear': No scheme supplied. Perhaps you meant https://clear?
2025-04-02 11:28:39,552 - INFO - Scanned https://123moviesfreetv.com/: []
2025-04-02 11:34:05,039 - INFO - Scanning https://example.com/api...
